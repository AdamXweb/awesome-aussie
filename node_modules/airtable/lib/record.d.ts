import Table from './table';
interface RecordCallback {
    (error: null, record: Record): void;
    (error: any): void;
}
interface RecordActionMethod {
    (): Promise<Record>;
    (done: RecordCallback): void;
}
interface RecordChangeMethod {
    (cellValuesByName: any, done: RecordCallback): void;
    (cellValuesByName: any, opts: any, done: RecordCallback): void;
    (cellValuesByName: any, opts?: any): Promise<Record>;
}
declare class Record {
    readonly _table: Table;
    _rawJson: any;
    readonly id: string;
    fields: any;
    readonly save: RecordActionMethod;
    readonly patchUpdate: RecordChangeMethod;
    readonly putUpdate: RecordChangeMethod;
    readonly destroy: RecordActionMethod;
    readonly fetch: RecordActionMethod;
    readonly updateFields: RecordChangeMethod;
    readonly replaceFields: RecordChangeMethod;
    constructor(table: Table, recordId: string, recordJson?: any);
    getId(): string;
    get(columnName: string): any;
    set(columnName: string, columnValue: any): void;
    setRawJson(rawJson: any): void;
}
export = Record;
