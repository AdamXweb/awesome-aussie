import AirtableError from './airtable_error';
import Table from './table';
import type Airtable from './airtable';
declare type BaseRequestOptions = {
    method?: string;
    path?: string;
    qs?: Record<string, any>;
    headers?: Record<string, any>;
    body?: Record<string, any>;
    _numAttempts?: number;
};
declare type BaseResponse = Response & {
    statusCode: Response['status'];
};
declare type AirtableBase = {
    (tableName: string): Table;
    _base: Base;
    getId(): string;
    makeRequest(options: BaseRequestOptions): Promise<BaseResponse>;
    table(tableName: string): Table;
};
declare class Base {
    readonly _airtable: Airtable;
    readonly _id: string;
    constructor(airtable: Airtable, baseId: string);
    table(tableName: string): Table;
    makeRequest(options?: BaseRequestOptions): Promise<unknown>;
    /**
     * @deprecated This method is deprecated.
     */
    runAction(method: any, path: any, queryParams: any, bodyData: any, callback: any): void;
    _getRequestHeaders(headers: any): {};
    _checkStatusForError(statusCode: any, body: any): AirtableError;
    doCall(tableName: any): Table;
    getId(): string;
    static createFunctor(airtable: Airtable, baseId: string): AirtableBase;
}
export = Base;
