import Base from './base';
import Record from './record';
import Table from './table';
import AirtableError from './airtable_error';
declare class Airtable {
    readonly _apiKey: string;
    readonly _endpointUrl: string;
    readonly _apiVersion: string;
    readonly _apiVersionMajor: string;
    readonly _noRetryIfRateLimited: boolean;
    requestTimeout: number;
    static Base: typeof Base;
    static Record: typeof Record;
    static Table: typeof Table;
    static Error: typeof AirtableError;
    static apiKey: string;
    static apiVersion: string;
    static endpointUrl: string;
    static noRetryIfRateLimited: boolean;
    constructor(opts?: {
        apiKey?: string;
        apiVersion?: string;
        endpointUrl?: string;
        requestTimeout?: number;
        noRetryIfRateLimited?: boolean;
    });
    base(baseId: string): {
        (tableName: string): Table;
        _base: Base;
        getId(): string;
        makeRequest(options: {
            method?: string;
            path?: string;
            qs?: globalThis.Record<string, any>;
            headers?: globalThis.Record<string, any>;
            body?: globalThis.Record<string, any>;
            _numAttempts?: number;
        }): Promise<Response & {
            statusCode: number;
        }>;
        table(tableName: string): Table;
    };
    static default_config(): {
        endpointUrl: string;
        apiVersion: string;
        apiKey: string;
        noRetryIfRateLimited: boolean;
        requestTimeout: number;
    };
    static configure({ apiKey, endpointUrl, apiVersion, noRetryIfRateLimited }: {
        apiKey: any;
        endpointUrl: any;
        apiVersion: any;
        noRetryIfRateLimited: any;
    }): void;
    static base(baseId: string): {
        (tableName: string): Table;
        _base: Base;
        getId(): string;
        makeRequest(options: {
            method?: string;
            path?: string;
            qs?: globalThis.Record<string, any>;
            headers?: globalThis.Record<string, any>;
            body?: globalThis.Record<string, any>;
            _numAttempts?: number;
        }): Promise<Response & {
            statusCode: number;
        }>;
        table(tableName: string): Table;
    };
}
export = Airtable;
