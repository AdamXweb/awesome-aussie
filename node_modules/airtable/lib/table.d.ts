import Query from './query';
import { QueryParams } from './query_params';
import Record from './record';
import Base from './base';
declare type OptionalParameters = {
    [key: string]: any;
};
declare type RecordCallback = (error: any, record?: Record) => void;
declare type RecordCollectionCallback = (error: any, records?: Record[]) => void;
interface TableFindRecord {
    (recordId: string): Promise<Record>;
    (recordId: string, done: RecordCallback): void;
}
interface TableCreateRecords {
    (recordsData: any[], optionalParameters?: OptionalParameters): Promise<Record[]>;
    (recordsData: any[], optionalParameters: OptionalParameters, done: RecordCollectionCallback): void;
    (recordsData: any[], done: RecordCollectionCallback): void;
    (recordData: any, optionalParameters?: OptionalParameters): Promise<Record>;
    (recordData: any, optionalParameters: OptionalParameters, done: RecordCallback): void;
    (recordData: any, done: RecordCallback): void;
}
interface TableChangeRecords {
    (recordId: string, recordData: any, opts?: OptionalParameters): Promise<Record>;
    (recordId: string, recordData: any, opts: OptionalParameters, done: RecordCallback): void;
    (recordId: string, recordData: any, done: RecordCallback): void;
    (recordsData: any[], opts?: OptionalParameters): Promise<Record[]>;
    (recordsData: any[], opts: OptionalParameters, done: RecordCollectionCallback): void;
    (recordsData: any[], done: RecordCollectionCallback): void;
}
interface TableDestroyRecords {
    (recordId: string): Promise<Record>;
    (recordIds: string[]): Promise<Record[]>;
    (recordIds: string[], done: RecordCollectionCallback): void;
}
declare class Table {
    readonly _base: Base;
    readonly id: string;
    readonly name: string;
    readonly find: TableFindRecord;
    readonly select: (params?: QueryParams) => Query;
    readonly create: TableCreateRecords;
    readonly update: TableChangeRecords;
    readonly replace: TableChangeRecords;
    readonly destroy: TableDestroyRecords;
    /** @deprecated */
    readonly list: any;
    /** @deprecated */
    readonly forEach: any;
    static __recordsPerPageForIteration: number;
    constructor(base: Base, tableId: string, tableName: string);
    _findRecordById(recordId: string, done: RecordCallback): void;
    _selectRecords(params?: QueryParams): Query;
    _urlEncodedNameOrId(): string;
    _createRecords(recordData: any, done: RecordCallback): void;
    _createRecords(recordData: any, optionalParameters: OptionalParameters, done: RecordCallback): void;
    _createRecords(recordsData: any[], done: RecordCollectionCallback): void;
    _createRecords(recordsData: any[], optionalParameters: OptionalParameters, done: RecordCollectionCallback): void;
    _updateRecords(isDestructiveUpdate: boolean, recordId: string, recordData: any, done: RecordCallback): void;
    _updateRecords(isDestructiveUpdate: boolean, recordId: string, recordData: any, opts: OptionalParameters, done: RecordCallback): void;
    _updateRecords(isDestructiveUpdate: boolean, recordsData: any[], done: RecordCollectionCallback): void;
    _updateRecords(isDestructiveUpdate: boolean, recordsData: any[], opts: OptionalParameters, done: RecordCollectionCallback): void;
    _destroyRecord(recordId: string, done: RecordCallback): void;
    _destroyRecord(recordIds: string[], done: RecordCollectionCallback): void;
    _listRecords(limit: any, offset: any, opts: any, done: any): void;
    _forEachRecord(opts: any, callback: any, done: any): void;
}
export = Table;
